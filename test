import discord
from discord.ext import commands
from discord_slash import SlashCommand, SlashContext
import aiosqlite
from datetime import datetime

intents = discord.Intents.default()
intents.message_content = True  # Enable reading message content if needed

bot = commands.Bot(command_prefix='/', intents=intents)
slash = SlashCommand(bot, sync_commands=True)

async def init_db():
    async with aiosqlite.connect('worktime.db') as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS worktime (
                user_id INTEGER PRIMARY KEY,
                start_time TEXT,
                end_time TEXT,
                total_time INTEGER
            )
        ''')
        await db.commit()

@bot.event
async def on_ready():
    await init_db()
    print(f'Logged in as {bot.user}')

@slash.slash(name="fichar")
async def _fichar(ctx: SlashContext):
    user_id = ctx.author.id
    async with aiosqlite.connect('worktime.db') as db:
        cursor = await db.execute('SELECT start_time, end_time, total_time FROM worktime WHERE user_id = ?', (user_id,))
        row = await cursor.fetchone()

        if row is None or row[1] is not None:  # If not working, start working
            await db.execute('REPLACE INTO worktime (user_id, start_time, end_time, total_time) VALUES (?, ?, ?, ?)',
                             (user_id, datetime.utcnow(), None, row[2] if row else 0))
            await ctx.send(f'You are now marked as working.', hidden=True)
        else:  # If already working, stop working
            start_time = datetime.fromisoformat(row[0])
            end_time = datetime.utcnow()
            total_time = (end_time - start_time).seconds + row[2]
            await db.execute('UPDATE worktime SET end_time = ?, total_time = ? WHERE user_id = ?',
                             (end_time, total_time, user_id))
            await ctx.send(f'You are now marked as not working.', hidden=True)

        await db.commit()

@slash.slash(name="worktime")
@commands.has_permissions(administrator=True)
async def _worktime(ctx: SlashContext, user: discord.User):
    user_id = user.id
    async with aiosqlite.connect('worktime.db') as db:
        cursor = await db.execute('SELECT total_time FROM worktime WHERE user_id = ?', (user_id,))
        row = await cursor.fetchone()

        if row:
            total_hours = row[0] // 3600
            total_minutes = (row[0] % 3600) // 60
            await ctx.send(f'{user.mention} has worked for {total_hours} hours and {total_minutes} minutes.', hidden=True)
        else:
            await ctx.send(f'{user.mention} has no recorded work time.', hidden=True)

@slash.slash(name="cleardb")
@commands.has_permissions(administrator=True)
async def _cleardb(ctx: SlashContext):
    async with aiosqlite.connect('worktime.db') as db:
        await db.execute('DELETE FROM worktime')
        await db.commit()
    await ctx.send('The database has been cleared.', hidden=True)

bot.run('')
